# -*- coding: utf-8 -*-
"""SecureLinkPerfAnalysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dk0AZWX6ErvpxKNxFVPWaWFtPBkk5txt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
#CSVs
df_ipsec = pd.read_csv('/content/drive/MyDrive/FACULDADE/Semestre 2023.2/Análise e desempenho em redes de computadores/Datasets/ipsec.csv')
df_tls = pd.read_csv('/content/drive/MyDrive/FACULDADE/Semestre 2023.2/Análise e desempenho em redes de computadores/Datasets/tls.csv')
df_normal = pd.read_csv('/content/drive/MyDrive/FACULDADE/Semestre 2023.2/Análise e desempenho em redes de computadores/Datasets/normal.csv')

#métricas utilizadas
# 1. Taxa de Transferência Efetiva
# 2. Taxa de Bits.
# 3. Perda de Pacotes de Túnel
# 4. Taxa de Erros e Retransmissões
# 5. Variação na Taxa de Transferência e Taxa de Bits
# 6. Análise de Picos e Quedas.
# 7. Congestion Window

# 1. Taxa de Transferência Efetiva(vazão)
#IPsec
tranferenciaTotalIpsec = df_ipsec['Transfer(MB)'].sum()
tempoTotal = 240
taxaTransferenciaEfetivaIpsec = round((tranferenciaTotalIpsec / tempoTotal) * 8, 2)
print(f"Taxa de Transferência Efetiva Média do túnel IPsec:{round(taxaTransferenciaEfetivaIpsec,2)}Mbps")

#TLS
tranferenciaTotalTls = df_tls['Transfer(MB)'].sum()
tempoTotal = 240
taxaTransferenciaEfetivaTls = round((tranferenciaTotalTls / tempoTotal) * 8, 2)
print(f"Taxa de Transferência Efetiva Média do túnel TLS:{round(taxaTransferenciaEfetivaTls,2)}Mbps")

# Valores para o gráfico
taxas_transferencia = [taxaTransferenciaEfetivaIpsec, taxaTransferenciaEfetivaTls]

# Rótulos para as barras
protocolos = ['IPsec', 'TLS']

# Criar o gráfico de barras
plt.bar(protocolos, taxas_transferencia, color=['blue', 'green'])
plt.title('Taxa de Transferência Efetiva Média para IPsec e TLS')
plt.ylabel('Taxa de Transferência (Mbps)')
plt.show()

# 2. Taxa de Bits.
#IPsec
taxaBitsIpsec = round(df_ipsec['Bitrate(MB)'].mean(), 2)
print(f"IPsec: {round(taxaBitsIpsec,2)}MB/s")
#TLS
taxaBitsTls = round(df_tls['Bitrate(MB)'].mean(), 2)
print(f"TLS: {round(taxaBitsTls,2)}MB/s")

# Valores para o gráfico
taxas_bits = [taxaBitsIpsec, taxaBitsTls]

# Rótulos para as barras
protocolos_bits = ['IPsec', 'TLS']

# Criar o gráfico de barras
plt.bar(protocolos_bits, taxas_bits, color=['blue', 'green'])
plt.title('Taxa Média de Bits para IPsec e TLS')
plt.ylabel('Taxa de Bits (MB/s)')
plt.show()

# 3. Perda de Pacotes de Túnel
# IPsec
pacotesPerdidosIpsec = df_ipsec['Retr'].sum()
print(f"IPsec: {pacotesPerdidosIpsec}")

# TLS
pacotesPerdidosTls = df_tls['Retr'].sum()
print(f"TLS: {pacotesPerdidosTls}")

# Valores para o gráfico
pacotes_perdidos = [pacotesPerdidosIpsec, pacotesPerdidosTls]

# Rótulos para as barras
protocolos_perda_pacotes = ['IPsec', 'TLS']

# Criar o gráfico de barras
plt.bar(protocolos_perda_pacotes, pacotes_perdidos, color=['blue', 'green'])
plt.title('Perda de Pacotes de Túnel para IPsec e TLS')
plt.ylabel('Número de Pacotes Perdidos')
plt.show()

# 4. Taxa de Erros e Retransmissões
#IPsec
pacotesEnviadosIpsec = (tranferenciaTotalIpsec / 0.128)
retransmissoes = df_ipsec['Retr'].sum()
taxaPerdaPacotesIpsec = (retransmissoes / pacotesEnviadosIpsec) * 100
print(f"IPsec: {round(taxaPerdaPacotesIpsec,2)}%")

#TLS
pacotesEnviadosTls = (tranferenciaTotalTls / 0.128)
retransmissoes = df_tls['Retr'].sum()
taxaPerdaPacotesTls = (retransmissoes / pacotesEnviadosTls) * 100
print(f"TLS: {round(taxaPerdaPacotesTls,2)}%")

# Valores para o gráfico
taxa_erros = [taxaPerdaPacotesIpsec, taxaPerdaPacotesTls]
retransmissoes = [100 - taxaPerdaPacotesIpsec, 100 - taxaPerdaPacotesTls]  # O complemento para 100%

# Rótulos para as barras
protocolos_taxa_erros = ['IPsec', 'TLS']

# Criar o gráfico de barras empilhadas
plt.bar(protocolos_taxa_erros, taxa_erros, color='red', label='Taxa de Erros')
plt.bar(protocolos_taxa_erros, retransmissoes, bottom=taxa_erros, color='blue', label='Retransmissões')

plt.title('Taxa de Erros e Retransmissões para IPsec e TLS')
plt.ylabel('Porcentagem')
plt.legend()
plt.show()

# 5. Variação na Taxa de Transferência e Taxa de Bits
#IPsec
variacaoBitrateIpsec = df_ipsec['Bitrate(MB)'].diff()
variacaoTransferIpsec = df_ipsec['Transfer(MB)'].diff()

plt.plot(variacaoBitrateIpsec)
plt.title('Variação do Bitrate(MB) IPsec')
plt.xlabel('Índice')
plt.ylabel('Variação')
plt.show()

plt.plot(variacaoTransferIpsec)
plt.title('Variação do Transfer(MB) IPsec')
plt.xlabel('Índice')
plt.ylabel('Variação')
plt.show()

#TLS
variacaoBitrateTls = df_tls['Bitrate(MB)'].diff()
variacaoTransferTls = df_tls['Transfer(MB)'].diff()

plt.plot(variacaoBitrateTls)
plt.title('Variação do Bitrate(MB) TLS')
plt.xlabel('Índice')
plt.ylabel('Variação')
plt.show()

plt.plot(variacaoTransferTls)
plt.title('Variação do Transfer(MB) TLS')
plt.xlabel('Índice')
plt.ylabel('Variação')
plt.show()

# variância populacional
#IPsec
varianciaBitrateIpsec = np.var(df_ipsec['Bitrate(MB)'])
varianciaTransferIpsec = np.var(df_ipsec['Transfer(MB)'])

#TLS
varianciaBitrateTls = np.var(df_tls['Bitrate(MB)'])
varianciaTransferTls = np.var(df_tls['Transfer(MB)'])

# Lista de rótulos para as barras
labels = ['Bitrate IPsec', 'Transfer IPsec', 'Bitrate TLS', 'Transfer TLS']

# Lista de valores das variâncias
variancias = [varianciaBitrateIpsec, varianciaTransferIpsec, varianciaBitrateTls, varianciaTransferTls]

# Criar um gráfico de barras
plt.bar(labels, variancias, color=['blue', 'blue', 'green', 'green'])
plt.title('Comparação de Variâncias entre IPsec e TLS')
plt.ylabel('Variância Populacional')
plt.show()

# 7. Congestion Window
# IPsec
# Plotando a janela de congestionamento
time = 240
plt.figure(figsize=(10, 6))
plt.subplot(3, 1, 1)
plt.plot(df_ipsec['Interval'], df_ipsec['Cwnd(KB)'], label='Janela de Congestionamento')
plt.title('Variação da Janela de Congestionamento ao Longo do Tempo (KB)')
plt.xlabel('Tempo')
plt.ylabel('Janela de Congestionamento (KB)')
plt.legend()

# Plotando a taxa de transferência
plt.subplot(3, 1, 2)
plt.plot(df_ipsec['Interval'], df_ipsec['Transfer(MB)'], label='Taxa de Transferência')
plt.title('Variação da Taxa de Transferência ao Longo do Tempo')
plt.xlabel('Tempo')
plt.ylabel('Taxa de Transferência (MB)')
plt.legend()

# Plotando a taxa de bits
plt.subplot(3, 1, 3)
plt.plot(df_ipsec['Interval'], df_ipsec['Bitrate(MB)'], label='Taxa de Bits')
plt.title('Variação da Taxa de Bits ao Longo do Tempo')
plt.xlabel('Tempo')
plt.ylabel('Taxa de Bits (MB)')
plt.legend()

plt.tight_layout()
plt.show()

# 7. Congestion Window
# TLS
# Plotando a janela de congestionamento
time = 240
plt.figure(figsize=(10, 6))
plt.subplot(3, 1, 1)
plt.plot(df_tls['Interval'], df_tls['Cwnd(KB)'], label='Janela de Congestionamento')
plt.title('Variação da Janela de Congestionamento ao Longo do Tempo (KB)')
plt.xlabel('Tempo')
plt.ylabel('Janela de Congestionamento (KB)')
plt.legend()

# Plotando a taxa de transferência
plt.subplot(3, 1, 2)
plt.plot(df_tls['Interval'], df_tls['Transfer(MB)'], label='Taxa de Transferência')
plt.title('Variação da Taxa de Transferência ao Longo do Tempo')
plt.xlabel('Tempo')
plt.ylabel('Taxa de Transferência (MB)')
plt.legend()

# Plotando a taxa de bits
plt.subplot(3, 1, 3)
plt.plot(df_tls['Interval'], df_tls['Bitrate(MB)'], label='Taxa de Bits')
plt.title('Variação da Taxa de Bits ao Longo do Tempo')
plt.xlabel('Tempo')
plt.ylabel('Taxa de Bits (MB)')
plt.legend()

plt.tight_layout()
plt.show()